#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Project Euler in Python (2.5)
# John Evans <john@jpevans.com>
# Dustin Mitchell <dustin@v.igoro.us>


import sys
import math
from util import *

##
# decorators for euler methods

solutions = {}
def problem(num):
    def dec(fn):
        solutions[num] = fn
        fn.func_name = 'euler%d' % num
        return fn
    return dec

def answer(ans):
    def dec(fn):
        fn.answer = ans
        def wrapper():
            result = fn()
            assert result == ans, "correct answer: %s; got: %s" % (ans, result)
            return result
        wrapper.answer = fn.answer
        wrapper.func_name = fn.func_name
        wrapper.func_doc = fn.func_doc
        return wrapper
    return dec

##
# solutions

@problem(1)
@answer(233168)
def soln():
    """
    If we list all the natural numbers below 10 that are multiples of 3 or 5,
    we get 3, 5, 6 and 9. The sum of these multiples is 23.

    Find the sum of all the multiples of 3 or 5 below 1000.
    """
    return sum(i for i in xrange(1, 1000) if i % 3 == 0 or i % 5 == 0)

@problem(2)
@answer(4613732)
def soln():
    """
    Each new term in the Fibonacci sequence is generated by adding the previous
    two terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    Find the sum of all the even-valued terms in the sequence which do not
    exceed four million.
    """
    total = 0
    n = 0
    while 1:
        f = fib(n)
        if f > 4000000: break
        if f & 1 == 0: total += f
        n += 1
    return total

@problem(3)
@answer(6857)
def soln():
    """
    The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600851475143 ?
    """
    X = 600851475143
    mkprimes(math.ceil(math.sqrt(X)))
    for i in xrange(len(primes)):
        if X % primes[-i] == 0:
            return primes[-i]

@problem(4)
@answer(906609)
def soln():
    """ 
    A palindromic number reads the same both ways. The largest
    palindrome made from the product of two 2-digit numbers is 9009 =
    91 99.

    Find the largest palindrome made from the product of two 3-digit
    numbers.
    """
    def product_palindromes():
        for a in range(100, 1000):
            for b in range(a, 1000):
                c = a * b
                if is_palindrome(c):
                    yield c
    return findmin([p for p in product_palindromes() ], cmp=lambda x,y:x<y)

@problem(5)
@answer(232792560)
def soln():
    """ 
    2520 is the smallest number that can be divided by each of the
    numbers from 1 to 10 without any remainder.

    What is the smallest number that is evenly divisible by all of the
    numbers from 1 to 20?
    """
    return reduce(lcm, range(1,21))

@problem(6)
@answer(25164150)
def soln():
    """
    The sum of the squares of the first ten natural numbers is,
      1**2 + 2**2 + ... + 10**2 = 385
    The square of the sum of the first ten natural numbers is,
      (1 + 2 + ... + 10)**2 = 55**2 = 3025
    Hence the difference between the sum of the squares of the first
    ten natural numbers and the square of the sum is 3025 - 385 = 2640.

    Find the difference between the sum of the squares of the first one
    hundred natural numbers and the square of the sum.
    """
    r = range(1, 101)
    s = sum(r)
    return (s * s) - sum([(i * i) for i in r])


@problem(7)
@answer(104743)
def soln():
    """
    By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

    What is the 10001st prime number?
    """
    nprimes(10001)
    return primes[10000]

@problem(10)
@answer(142913828922)
def soln():
    """
    The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

    Find the sum of all the primes below two million.
    """
    mkprimes(2000000)
    return sum(p for p in primes if p < 2000000)

@problem(11)
@answer(70600674)
def soln():
    """
    In the 20x20 grid below, four numbers along a diagonal line have been marked in red.

    The product of these numbers is 26 x 63 x 78 x 14 = 1788696.

    What is the greatest product of four adjacent numbers in any direction (up,
    down, left, right, or diagonally) in the 20x20 grid?
    """
    grid = [
            [8,2,22,97,38,15,0,40,0,75,4,5,7,78,52,12,50,77,91,8],
            [49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48,4,56,62,0],
            [81,49,31,73,55,79,14,29,93,71,40,67,53,88,30,3,49,13,36,65],
            [52,70,95,23,4,60,11,42,69,24,68,56,1,32,56,71,37,2,36,91],
            [22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80],
            [24,47,32,60,99,3,45,2,44,75,33,53,78,36,84,20,35,17,12,50],
            [32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70],
            [67,26,20,68,2,62,12,20,95,63,94,39,63,8,40,91,66,49,94,21],
            [24,55,58,5,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72],
            [21,36,23,9,75,0,76,44,20,45,35,14,0,61,33,97,34,31,33,95],
            [78,17,53,28,22,75,31,67,15,94,3,80,4,62,16,14,9,53,56,92],
            [16,39,5,42,96,35,31,47,55,58,88,24,0,17,54,24,36,29,85,57],
            [86,56,0,48,35,71,89,7,5,44,44,37,44,60,21,58,51,54,17,58],
            [19,80,81,68,5,94,47,69,28,73,92,13,86,52,17,77,4,89,55,40],
            [4,52,8,83,97,35,99,16,7,97,57,32,16,26,26,79,33,27,98,66],
            [88,36,68,87,57,62,20,72,3,46,33,67,46,55,12,32,63,93,53,69],
            [4,42,16,73,38,25,39,11,24,94,72,18,8,46,29,32,40,62,76,36],
            [20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74,4,36,16],
            [20,73,35,29,78,31,90,1,74,31,49,71,48,86,81,16,23,57,5,54],
            [1,70,54,71,83,51,54,69,16,92,33,48,61,43,52,1,89,19,67,48],
        ]
    def get(x, y):
        if x < 0 or x >= 20 or y < 0 or y >= 20: return 0
        return grid[x][y]

    def prod(l): return reduce(lambda x,y : x*y, l)
    biggest = 0
    for x in range(20-4):
        for y in range(20-4):
            vec = [ get(x+i, y+i) for i in range(4) ]
            biggest = max(biggest, prod(vec))
            vec = [ get(x+(4-i), y+i) for i in range(4) ]
            biggest = max(biggest, prod(vec))
            vec = [ get(x+i, y) for i in range(4) ]
            biggest = max(biggest, prod(vec))
            vec = [ get(x, y+i) for i in range(4) ]
            biggest = max(biggest, prod(vec))

    return biggest


##
# runner

if __name__ == "__main__":
    if len(sys.argv) > 1:
        for n in sys.argv[1:]:
            n = int(n)
            if n in solutions:
                print "%d: %d" % (n, solutions[n]())
            else:
                print "%d: no solution" % (n,)
    else:
        for n, soln in sorted(solutions.items()):
            print "%d: %d" % (n, soln())
